import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
import mglearn
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import PolynomialFeatures

#read experimental data from external source

df=pd.read_excel("pomiary BL epilation 19032024v4.xlsx", sheet_name='pomiary BL epilation 19032024v2')

#assign x and y values for algorythm fitting purposes

X = df[['t', 'F']].values
y = df['I'].values

#transform x into polynomial

poly = PolynomialFeatures(degree=5, include_bias=False)
X_poly = poly.fit_transform(X)

#assign test and train data

X_train, X_test, y_train, y_test =  train_test_split(X_poly, y, test_size=0.2, random_state=42)

#fit algorythm to data

model = LinearRegression()
model.fit(X_train, y_train)

#test data fit quality with MSE and R2 

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MSE: ", mse, " R2: ", r2)

#get polynomial result coefs and intercept value

intercept = model.intercept_

coefficients = model.coef_

feature_names = poly.get_feature_names_out(['time', 'fluence'])

coef_dict = {name: coef for name, coef in zip(feature_names, coefficients)}

#visualize fitted algorythm on a plot with experimental data present

t_range = np.linspace(X[:, 0].min(), X[:, 0].max(), 100)
F_range = np.linspace(X[:, 1].min(), X[:, 1].max(), 100)
t_grid, F_grid = np.meshgrid(t_range, F_range)
X_grid = np.hstack((t_grid.reshape(-1, 1), F_grid.reshape(-1, 1)))
X_poly_grid = poly.transform(X_grid)



I_pred = model.predict(X_poly_grid)
I_pred = np.clip(I_pred, a_min=None, a_max=120)

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')


ax.scatter(df['t'], df['F'], df['I'], color='red', label='Exp. data')


ax.plot_surface(t_grid, F_grid, I_pred.reshape(t_grid.shape), alpha=0.5, cmap='viridis', edgecolor='none')



ax.set_xlabel('Impulse time [ms]')
ax.set_ylabel('Fluence [J/CM2]')
ax.set_zlabel('Current [A]')
ax.set_title('')
ax.legend()

plt.show()
